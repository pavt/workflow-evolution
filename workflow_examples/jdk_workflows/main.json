{
  "name": "OpenJDK GHA Sanity Checks",
  "on": {
    "push": {
      "branches-ignore": [
        "master",
        "pr/*"
      ]
    },
    "workflow_dispatch": {
      "inputs": {
        "platforms": {
          "description": "Platform(s) to execute on (comma separated, e.g. \"linux-x64, macos, aarch64\")",
          "required": true,
          "default": "linux-x64, linux-x86, linux-x64-variants, linux-cross-compile, macos-x64, macos-aarch64, windows-x64, windows-aarch64"
        },
        "configure-arguments": {
          "description": "Additional configure arguments",
          "required": false
        },
        "make-arguments": {
          "description": "Additional make arguments",
          "required": false
        }
      }
    }
  },
  "concurrency": {
    "group": "${{ github.workflow }}-${{ github.ref }}",
    "cancel-in-progress": true
  },
  "jobs": {
    "select": {
      "name": "Select platforms",
      "runs-on": "ubuntu-22.04",
      "outputs": {
        "linux-x64": "${{ steps.include.outputs.linux-x64 }}",
        "linux-x86": "${{ steps.include.outputs.linux-x86 }}",
        "linux-x64-variants": "${{ steps.include.outputs.linux-x64-variants }}",
        "linux-cross-compile": "${{ steps.include.outputs.linux-cross-compile }}",
        "macos-x64": "${{ steps.include.outputs.macos-x64 }}",
        "macos-aarch64": "${{ steps.include.outputs.macos-aarch64 }}",
        "windows-x64": "${{ steps.include.outputs.windows-x64 }}",
        "windows-aarch64": "${{ steps.include.outputs.windows-aarch64 }}"
      },
      "steps": [
        {
          "name": "Check what jobs to run",
          "id": "include",
          "run": "# Determine which platform jobs to run\n\n# Returns 'true' if the input platform list matches any of the platform monikers given as argument,\n# 'false' otherwise.\n# arg $1: platform name or names to look for\nfunction check_platform() {\n  if [[ '${{ !secrets.JDK_SUBMIT_FILTER || startsWith(github.ref, 'refs/heads/submit/') }}' == 'false' ]]; then\n    # If JDK_SUBMIT_FILTER is set, and this is not a \"submit/\" branch, don't run anything\n    echo 'false'\n    return\n  fi\n\n  if [[ $GITHUB_EVENT_NAME == workflow_dispatch ]]; then\n    input='${{ github.event.inputs.platforms }}'\n  elif [[ $GITHUB_EVENT_NAME == push ]]; then\n    input='${{ secrets.JDK_SUBMIT_PLATFORMS }}'\n  else\n    echo 'Internal error in GHA'\n    exit 1\n  fi\n\n  normalized_input=\"$(echo ,$input, | tr -d ' ')\"\n  if [[ \"$normalized_input\" == \",,\" ]]; then\n    # For an empty input, assume all platforms should run\n    echo 'true'\n    return\n  else\n    # Check for all acceptable platform names\n    for part in $* ; do\n      if echo \"$normalized_input\" | grep -q -e \",$part,\" ; then\n        echo 'true'\n        return\n      fi\n    done\n  fi\n\n  echo 'false'\n}\n\necho \"linux-x64=$(check_platform linux-x64 linux x64)\" >> $GITHUB_OUTPUT\necho \"linux-x86=$(check_platform linux-x86 linux x86)\" >> $GITHUB_OUTPUT\necho \"linux-x64-variants=$(check_platform linux-x64-variants variants)\" >> $GITHUB_OUTPUT\necho \"linux-cross-compile=$(check_platform linux-cross-compile cross-compile)\" >> $GITHUB_OUTPUT\necho \"macos-x64=$(check_platform macos-x64 macos x64)\" >> $GITHUB_OUTPUT\necho \"macos-aarch64=$(check_platform macos-aarch64 macos aarch64)\" >> $GITHUB_OUTPUT\necho \"windows-x64=$(check_platform windows-x64 windows x64)\" >> $GITHUB_OUTPUT\necho \"windows-aarch64=$(check_platform windows-aarch64 windows aarch64)\" >> $GITHUB_OUTPUT\n"
        }
      ]
    },
    "build-linux-x64": {
      "name": "linux-x64",
      "needs": "select",
      "uses": "./.github/workflows/build-linux.yml",
      "with": {
        "platform": "linux-x64",
        "gcc-major-version": "10",
        "apt-gcc-version": "10.4.0-4ubuntu1~22.04",
        "configure-arguments": "${{ github.event.inputs.configure-arguments }}",
        "make-arguments": "${{ github.event.inputs.make-arguments }}"
      },
      "if": "needs.select.outputs.linux-x64 == 'true' || needs.select.outputs.linux-cross-compile == 'true'"
    },
    "build-linux-x86": {
      "name": "linux-x86",
      "needs": "select",
      "uses": "./.github/workflows/build-linux.yml",
      "with": {
        "platform": "linux-x86",
        "gcc-major-version": "10",
        "gcc-package-suffix": "-multilib",
        "apt-gcc-version": "10.4.0-4ubuntu1~22.04",
        "apt-architecture": "i386",
        "apt-extra-packages": "libfreetype6-dev:i386 libtiff-dev:i386 libcupsimage2-dev:i386 libc6-i386",
        "extra-conf-options": "--with-target-bits=32",
        "configure-arguments": "${{ github.event.inputs.configure-arguments }}",
        "make-arguments": "${{ github.event.inputs.make-arguments }}"
      },
      "if": "needs.select.outputs.linux-x86 == 'true'"
    },
    "build-linux-x64-hs-nopch": {
      "name": "linux-x64-hs-nopch",
      "needs": "select",
      "uses": "./.github/workflows/build-linux.yml",
      "with": {
        "platform": "linux-x64",
        "make-target": "hotspot",
        "debug-levels": "[ \"debug\" ]",
        "gcc-major-version": "10",
        "apt-gcc-version": "10.4.0-4ubuntu1~22.04",
        "extra-conf-options": "--disable-precompiled-headers",
        "configure-arguments": "${{ github.event.inputs.configure-arguments }}",
        "make-arguments": "${{ github.event.inputs.make-arguments }}"
      },
      "if": "needs.select.outputs.linux-x64-variants == 'true'"
    },
    "build-linux-x64-hs-zero": {
      "name": "linux-x64-hs-zero",
      "needs": "select",
      "uses": "./.github/workflows/build-linux.yml",
      "with": {
        "platform": "linux-x64",
        "make-target": "hotspot",
        "debug-levels": "[ \"debug\" ]",
        "gcc-major-version": "10",
        "apt-gcc-version": "10.4.0-4ubuntu1~22.04",
        "extra-conf-options": "--with-jvm-variants=zero --disable-precompiled-headers",
        "configure-arguments": "${{ github.event.inputs.configure-arguments }}",
        "make-arguments": "${{ github.event.inputs.make-arguments }}"
      },
      "if": "needs.select.outputs.linux-x64-variants == 'true'"
    },
    "build-linux-x64-hs-minimal": {
      "name": "linux-x64-hs-minimal",
      "needs": "select",
      "uses": "./.github/workflows/build-linux.yml",
      "with": {
        "platform": "linux-x64",
        "make-target": "hotspot",
        "debug-levels": "[ \"debug\" ]",
        "gcc-major-version": "10",
        "apt-gcc-version": "10.4.0-4ubuntu1~22.04",
        "extra-conf-options": "--with-jvm-variants=minimal --disable-precompiled-headers",
        "configure-arguments": "${{ github.event.inputs.configure-arguments }}",
        "make-arguments": "${{ github.event.inputs.make-arguments }}"
      },
      "if": "needs.select.outputs.linux-x64-variants == 'true'"
    },
    "build-linux-x64-hs-optimized": {
      "name": "linux-x64-hs-optimized",
      "needs": "select",
      "uses": "./.github/workflows/build-linux.yml",
      "with": {
        "platform": "linux-x64",
        "make-target": "hotspot",
        "debug-levels": "[ \"debug\" ]",
        "gcc-major-version": "10",
        "apt-gcc-version": "10.4.0-4ubuntu1~22.04",
        "extra-conf-options": "--with-debug-level=optimized --disable-precompiled-headers",
        "configure-arguments": "${{ github.event.inputs.configure-arguments }}",
        "make-arguments": "${{ github.event.inputs.make-arguments }}"
      },
      "if": "needs.select.outputs.linux-x64-variants == 'true'"
    },
    "build-linux-cross-compile": {
      "name": "linux-cross-compile",
      "needs": [
        "select",
        "build-linux-x64"
      ],
      "uses": "./.github/workflows/build-cross-compile.yml",
      "with": {
        "gcc-major-version": "10",
        "apt-gcc-version": "10.4.0-4ubuntu1~22.04",
        "apt-gcc-cross-version": "10.4.0-4ubuntu1~22.04cross1",
        "configure-arguments": "${{ github.event.inputs.configure-arguments }}",
        "make-arguments": "${{ github.event.inputs.make-arguments }}"
      },
      "if": "needs.select.outputs.linux-cross-compile == 'true'"
    },
    "build-macos-x64": {
      "name": "macos-x64",
      "needs": "select",
      "uses": "./.github/workflows/build-macos.yml",
      "with": {
        "platform": "macos-x64",
        "xcode-toolset-version": "11.7",
        "configure-arguments": "${{ github.event.inputs.configure-arguments }}",
        "make-arguments": "${{ github.event.inputs.make-arguments }}"
      },
      "if": "needs.select.outputs.macos-x64 == 'true'"
    },
    "build-macos-aarch64": {
      "name": "macos-aarch64",
      "needs": "select",
      "uses": "./.github/workflows/build-macos.yml",
      "with": {
        "platform": "macos-aarch64",
        "xcode-toolset-version": "12.4",
        "extra-conf-options": "--openjdk-target=aarch64-apple-darwin",
        "configure-arguments": "${{ github.event.inputs.configure-arguments }}",
        "make-arguments": "${{ github.event.inputs.make-arguments }}"
      },
      "if": "needs.select.outputs.macos-aarch64 == 'true'"
    },
    "build-windows-x64": {
      "name": "windows-x64",
      "needs": "select",
      "uses": "./.github/workflows/build-windows.yml",
      "with": {
        "platform": "windows-x64",
        "msvc-toolset-version": "14.29",
        "msvc-toolset-architecture": "x86.x64",
        "configure-arguments": "${{ github.event.inputs.configure-arguments }}",
        "make-arguments": "${{ github.event.inputs.make-arguments }}"
      },
      "if": "needs.select.outputs.windows-x64 == 'true'"
    },
    "build-windows-aarch64": {
      "name": "windows-aarch64",
      "needs": "select",
      "uses": "./.github/workflows/build-windows.yml",
      "with": {
        "platform": "windows-aarch64",
        "msvc-toolset-version": "14.29",
        "msvc-toolset-architecture": "arm64",
        "make-target": "hotspot",
        "extra-conf-options": "--openjdk-target=aarch64-unknown-cygwin",
        "configure-arguments": "${{ github.event.inputs.configure-arguments }}",
        "make-arguments": "${{ github.event.inputs.make-arguments }}"
      },
      "if": "needs.select.outputs.windows-aarch64 == 'true'"
    },
    "test-linux-x64": {
      "name": "linux-x64",
      "needs": [
        "build-linux-x64"
      ],
      "uses": "./.github/workflows/test.yml",
      "with": {
        "platform": "linux-x64",
        "bootjdk-platform": "linux-x64",
        "runs-on": "ubuntu-22.04"
      }
    },
    "test-linux-x86": {
      "name": "linux-x86",
      "needs": [
        "build-linux-x86"
      ],
      "uses": "./.github/workflows/test.yml",
      "with": {
        "platform": "linux-x86",
        "bootjdk-platform": "linux-x64",
        "runs-on": "ubuntu-22.04"
      }
    },
    "test-macos-x64": {
      "name": "macos-x64",
      "needs": [
        "build-macos-x64"
      ],
      "uses": "./.github/workflows/test.yml",
      "with": {
        "platform": "macos-x64",
        "bootjdk-platform": "macos-x64",
        "runs-on": "macos-11"
      }
    },
    "test-windows-x64": {
      "name": "windows-x64",
      "needs": [
        "build-windows-x64"
      ],
      "uses": "./.github/workflows/test.yml",
      "with": {
        "platform": "windows-x64",
        "bootjdk-platform": "windows-x64",
        "runs-on": "windows-2019"
      }
    },
    "remove-bundles": {
      "name": "Remove bundle artifacts",
      "runs-on": "ubuntu-22.04",
      "if": "always()",
      "needs": [
        "build-linux-x64",
        "build-linux-x86",
        "build-linux-x64-hs-nopch",
        "build-linux-x64-hs-zero",
        "build-linux-x64-hs-minimal",
        "build-linux-x64-hs-optimized",
        "build-linux-cross-compile",
        "build-macos-x64",
        "build-macos-aarch64",
        "build-windows-x64",
        "build-windows-aarch64",
        "test-linux-x64",
        "test-linux-x86",
        "test-macos-x64",
        "test-windows-x64"
      ],
      "steps": [
        {
          "name": "Get API configuration",
          "id": "api",
          "uses": "actions/github-script@v6",
          "with": {
            "script": "return { url: process.env[\"ACTIONS_RUNTIME_URL\"], token: process.env[\"ACTIONS_RUNTIME_TOKEN\"] }"
          }
        },
        {
          "name": "Remove bundle artifacts",
          "run": "# Find and remove all bundle artifacts\nALL_ARTIFACT_URLS=\"$(curl -s \\\n    -H 'Accept: application/json;api-version=6.0-preview' \\\n    -H 'Authorization: Bearer ${{ fromJson(steps.api.outputs.result).token }}' \\\n    '${{ fromJson(steps.api.outputs.result).url }}_apis/pipelines/workflows/${{ github.run_id }}/artifacts?api-version=6.0-preview')\"\nBUNDLE_ARTIFACT_URLS=\"$(echo \"$ALL_ARTIFACT_URLS\" | jq -r -c '.value | map(select(.name|startswith(\"bundles-\"))) | .[].url')\"\nfor url in $BUNDLE_ARTIFACT_URLS; do\n  echo \"Removing $url\"\n  curl -s \\\n      -H 'Accept: application/json;api-version=6.0-preview' \\\n      -H 'Authorization: Bearer ${{ fromJson(steps.api.outputs.result).token }}' \\\n      -X DELETE \"$url\" \\\n  || echo \"Failed to remove bundle\"\ndone\n"
        }
      ]
    }
  }
}