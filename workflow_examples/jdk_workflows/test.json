{
  "name": "Run tests",
  "on": {
    "workflow_call": {
      "inputs": {
        "platform": {
          "required": true,
          "type": "string"
        },
        "bootjdk-platform": {
          "required": true,
          "type": "string"
        },
        "runs-on": {
          "required": true,
          "type": "string"
        }
      }
    }
  },
  "env": {
    "MSYS2_PATH_TYPE": "minimal",
    "CHERE_INVOKING": 1
  },
  "jobs": {
    "test": {
      "name": "test",
      "runs-on": "${{ inputs.runs-on }}",
      "defaults": {
        "run": {
          "shell": "bash"
        }
      },
      "strategy": {
        "fail-fast": false,
        "matrix": {
          "test-name": [
            "jdk/tier1 part 1",
            "jdk/tier1 part 2",
            "jdk/tier1 part 3",
            "langtools/tier1",
            "hs/tier1 common",
            "hs/tier1 compiler",
            "hs/tier1 gc",
            "hs/tier1 runtime",
            "hs/tier1 serviceability"
          ],
          "include": [
            {
              "test-name": "jdk/tier1 part 1",
              "test-suite": "test/jdk/:tier1_part1"
            },
            {
              "test-name": "jdk/tier1 part 2",
              "test-suite": "test/jdk/:tier1_part2"
            },
            {
              "test-name": "jdk/tier1 part 3",
              "test-suite": "test/jdk/:tier1_part3"
            },
            {
              "test-name": "langtools/tier1",
              "test-suite": "test/langtools/:tier1"
            },
            {
              "test-name": "hs/tier1 common",
              "test-suite": "test/hotspot/jtreg/:tier1_common",
              "debug-suffix": "-debug"
            },
            {
              "test-name": "hs/tier1 compiler",
              "test-suite": "test/hotspot/jtreg/:tier1_compiler",
              "debug-suffix": "-debug"
            },
            {
              "test-name": "hs/tier1 gc",
              "test-suite": "test/hotspot/jtreg/:tier1_gc",
              "debug-suffix": "-debug"
            },
            {
              "test-name": "hs/tier1 runtime",
              "test-suite": "test/hotspot/jtreg/:tier1_runtime",
              "debug-suffix": "-debug"
            },
            {
              "test-name": "hs/tier1 serviceability",
              "test-suite": "test/hotspot/jtreg/:tier1_serviceability",
              "debug-suffix": "-debug"
            }
          ]
        }
      },
      "steps": [
        {
          "name": "Checkout the JDK source",
          "uses": "actions/checkout@v3"
        },
        {
          "name": "Get MSYS2",
          "uses": "./.github/actions/get-msys2",
          "if": "runner.os == 'Windows'"
        },
        {
          "name": "Get the BootJDK",
          "id": "bootjdk",
          "uses": "./.github/actions/get-bootjdk",
          "with": {
            "platform": "${{ inputs.bootjdk-platform }}"
          }
        },
        {
          "name": "Get JTReg",
          "id": "jtreg",
          "uses": "./.github/actions/get-jtreg"
        },
        {
          "name": "Get bundles",
          "id": "bundles",
          "uses": "./.github/actions/get-bundles",
          "with": {
            "platform": "${{ inputs.platform }}",
            "debug-suffix": "${{ matrix.debug-suffix }}"
          }
        },
        {
          "name": "Install dependencies",
          "run": "# On macOS we need to install some dependencies for testing\nbrew install make\nsudo xcode-select --switch /Applications/Xcode_11.7.app/Contents/Developer\n# This will make GNU make available as 'make' and not only as 'gmake'\necho '/usr/local/opt/make/libexec/gnubin' >> $GITHUB_PATH\n",
          "if": "runner.os == 'macOS'"
        },
        {
          "name": "Set PATH",
          "id": "path",
          "run": "# We need a minimal PATH on Windows\n# Set PATH to \"\", so just GITHUB_PATH is included\nif [[ '${{ runner.os }}' == 'Windows' ]]; then\n  echo \"value=\" >> $GITHUB_OUTPUT\nelse\n  echo \"value=$PATH\" >> $GITHUB_OUTPUT\nfi\n"
        },
        {
          "name": "Run tests",
          "id": "run-tests",
          "run": "make test-prebuilt TEST='${{ matrix.test-suite }}' BOOT_JDK=${{ steps.bootjdk.outputs.path }} JT_HOME=${{ steps.jtreg.outputs.path }} JDK_IMAGE_DIR=${{ steps.bundles.outputs.jdk-path }} SYMBOLS_IMAGE_DIR=${{ steps.bundles.outputs.symbols-path }} TEST_IMAGE_DIR=${{ steps.bundles.outputs.tests-path }} JTREG='JAVA_OPTIONS=-XX:-CreateCoredumpOnCrash;VERBOSE=fail,error,time;KEYWORDS=!headful' && bash ./.github/scripts/gen-test-summary.sh \"$GITHUB_STEP_SUMMARY\" \"$GITHUB_OUTPUT\"\n",
          "env": {
            "PATH": "${{ steps.path.outputs.value }}"
          }
        },
        {
          "name": "Generate test report",
          "run": "bash ./.github/scripts/gen-test-results.sh \"$GITHUB_STEP_SUMMARY\"",
          "if": "always()"
        },
        {
          "name": "Package test results",
          "id": "package",
          "run": "# Package test-results and relevant parts of test-support\nmkdir results\n\nif [[ -d build/run-test-prebuilt/test-results ]]; then\n  cd build/run-test-prebuilt/test-results/\n  zip -r -9 \"$GITHUB_WORKSPACE/results/test-results.zip\" .\n  cd $GITHUB_WORKSPACE\nelse\n  echo '::warning ::Missing test-results directory'\nfi\n\nif [[ -d build/run-test-prebuilt/test-support ]]; then\n  cd build/run-test-prebuilt/test-support/\n  zip -r -9 \"$GITHUB_WORKSPACE/results/test-support.zip\" . -i *.jtr -i */hs_err*.log -i */replay*.log\n  cd $GITHUB_WORKSPACE\nelse\n  echo '::warning ::Missing test-support directory'\nfi\n\nartifact_name=\"results-${{ inputs.platform }}-$(echo ${{ matrix.test-name }} | tr '/ ' '__')\"\necho \"artifact-name=$artifact_name\" >> $GITHUB_OUTPUT\n",
          "if": "always()"
        },
        {
          "name": "Upload test results",
          "uses": "actions/upload-artifact@v3",
          "with": {
            "path": "results",
            "name": "${{ steps.package.outputs.artifact-name }}"
          },
          "if": "always()"
        },
        {
          "name": "Notify about test failures",
          "uses": "actions/github-script@v6",
          "with": {
            "script": "core.setFailed('${{ steps.run-tests.outputs.error-message }}')"
          },
          "if": "steps.run-tests.outputs.failure == 'true'"
        }
      ]
    }
  }
}