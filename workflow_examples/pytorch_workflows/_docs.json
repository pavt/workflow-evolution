{
  "name": "build docs",
  "on": {
    "workflow_call": {
      "inputs": {
        "build-environment": {
          "required": true,
          "type": "string",
          "description": "Top-level label for what's being built/tested."
        },
        "docker-image": {
          "required": true,
          "type": "string",
          "description": "Docker image to run in."
        },
        "push": {
          "required": false,
          "type": "boolean",
          "default": false,
          "description": "If set, push the docs to the docs website."
        },
        "run-doxygen": {
          "required": false,
          "type": "boolean",
          "default": false,
          "description": "If set, will enable C++ API doc generation using doxygen / breathe / exhale."
        },
        "sync-tag": {
          "required": false,
          "type": "string",
          "default": "",
          "description": "If this is set, our linter will use this to make sure that every other\njob with the same `sync-tag` is identical.\n"
        }
      },
      "secrets": {
        "GH_PYTORCHBOT_TOKEN": {
          "required": false,
          "description": "Permissions for pushing to the docs site."
        }
      }
    }
  },
  "jobs": {
    "build-docs": {
      "if": "github.repository_owner == 'pytorch'",
      "runs-on": "${{ matrix.runner }}",
      "strategy": {
        "matrix": {
          "include": [
            {
              "docs_type": "cpp",
              "runner": "linux.12xlarge",
              "timeout-minutes": 240
            },
            {
              "docs_type": "python",
              "runner": "linux.2xlarge",
              "timeout-minutes": 30
            },
            {
              "docs_type": "functorch",
              "runner": "linux.2xlarge",
              "timeout-minutes": 15
            }
          ]
        }
      },
      "name": "build-docs-${{ matrix.docs_type }}-${{ inputs.push }}",
      "steps": [
        {
          "name": "Checkout PyTorch",
          "uses": "pytorch/pytorch/.github/actions/checkout-pytorch@master"
        },
        {
          "name": "Setup Linux",
          "uses": "./.github/actions/setup-linux"
        },
        {
          "name": "Setup SSH (Click me for login details)",
          "uses": "pytorch/test-infra/.github/actions/setup-ssh@main",
          "with": {
            "github-secret": "${{ secrets.GITHUB_TOKEN }}"
          }
        },
        {
          "name": "Pull docker image",
          "uses": "pytorch/test-infra/.github/actions/pull-docker-image@main",
          "with": {
            "docker-image": "${{ inputs.docker-image }}"
          }
        },
        {
          "name": "Download build artifacts",
          "uses": "./.github/actions/download-build-artifacts",
          "with": {
            "name": "${{ inputs.build-environment }}"
          }
        },
        {
          "name": "Generate netrc (only for docs-push)",
          "if": "inputs.push",
          "env": {
            "GITHUB_PYTORCHBOT_TOKEN": "${{ secrets.GH_PYTORCHBOT_TOKEN }}"
          },
          "run": "# set credentials for https pushing\necho \"machine github.com\" > \"${RUNNER_TEMP}/.netrc\"\necho \"login pytorchbot\" >> \"${RUNNER_TEMP}/.netrc\"\necho \"password ${GITHUB_PYTORCHBOT_TOKEN}\" >> \"${RUNNER_TEMP}/.netrc\"\n"
        },
        {
          "name": "Build ${{ matrix.docs_type }} docs",
          "timeout-minutes": "${{ matrix.timeout-minutes }}",
          "id": "build-docs",
          "env": {
            "WITH_PUSH": "${{ inputs.push }}",
            "DOCKER_IMAGE": "${{ inputs.docker-image }}",
            "DOCS_TYPE": "${{ matrix.docs_type }}",
            "RUN_DOXYGEN": "${{ inputs.run-doxygen }}",
            "BUILD_ENVIRONMENT": "${{ inputs.build-environment }}"
          },
          "run": "set -ex\n# Convert refs/tags/v1.12.0rc3 into 1.12\nif [[ \"${GITHUB_REF}\" =~ ^refs/tags/v([0-9]+\\.[0-9]+)\\.* ]]; then\n  target=\"${BASH_REMATCH[1]}\"\nelse\n  target=\"master\"\nfi\n# detached container should get cleaned up by teardown_ec2_linux\ncontainer_name=$(docker run \\\n  -e BUILD_ENVIRONMENT \\\n  -e MAX_JOBS=\"$(nproc --ignore=2)\" \\\n  -e SHA1=\"$GITHUB_SHA\" \\\n  -e DOCS_VERSION=\"${target}\" \\\n  -e DOCS_TYPE \\\n  -e RUN_DOXYGEN \\\n  -e WITH_PUSH \\\n  --env-file=\"/tmp/github_env_${GITHUB_RUN_ID}\" \\\n  --security-opt seccomp=unconfined \\\n  --cap-add=SYS_PTRACE \\\n  --tty \\\n  --detach \\\n  --user jenkins \\\n  -v \"${RUNNER_TEMP}/.netrc\":/var/lib/jenkins/.netrc \\\n  -v \"${GITHUB_WORKSPACE}:/var/lib/jenkins/workspace\" \\\n  -w /var/lib/jenkins/workspace \\\n  \"${DOCKER_IMAGE}\"\n)\ndocker exec -t \"${container_name}\" bash -c \"sudo chown -R jenkins . && pip install $(echo dist/*.whl)[opt-einsum] && ./.circleci/scripts/${DOCS_TYPE}_doc_push_script.sh\"\n"
        },
        {
          "name": "Chown workspace",
          "uses": "./.github/actions/chown-workspace",
          "if": "always()"
        },
        {
          "name": "Upload Python Docs Preview",
          "uses": "seemethere/upload-artifact-s3@v5",
          "if": "${{ github.event_name == 'pull_request' && matrix.docs_type == 'python' && steps.build-docs.outcome == 'success' }}",
          "with": {
            "retention-days": 14,
            "s3-bucket": "doc-previews",
            "if-no-files-found": "error",
            "path": "pytorch.github.io/docs/master/",
            "s3-prefix": "pytorch/${{ github.event.pull_request.number }}"
          }
        },
        {
          "name": "Upload C++ Docs Preview",
          "uses": "seemethere/upload-artifact-s3@v5",
          "if": "${{ github.event_name == 'pull_request' && matrix.docs_type == 'cpp' && steps.build-docs.outcome == 'success' }}",
          "with": {
            "retention-days": 14,
            "if-no-files-found": "error",
            "s3-bucket": "doc-previews",
            "path": "cppdocs/",
            "s3-prefix": "pytorch/${{ github.event.pull_request.number }}/cppdocs"
          }
        },
        {
          "name": "Upload functorch Docs Preview",
          "uses": "seemethere/upload-artifact-s3@v5",
          "if": "${{ github.event_name == 'pull_request' && matrix.docs_type == 'functorch' && steps.build-docs.outcome == 'success' }}",
          "with": {
            "retention-days": 14,
            "s3-bucket": "doc-previews",
            "if-no-files-found": "error",
            "path": "functorch_ghpages/nightly/",
            "s3-prefix": "pytorch/${{ github.event.pull_request.number }}/functorchdocs"
          }
        }
      ]
    }
  }
}