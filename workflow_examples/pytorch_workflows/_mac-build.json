{
  "name": "mac-build",
  "on": {
    "workflow_call": {
      "inputs": {
        "build-environment": {
          "required": true,
          "type": "string",
          "description": "Top-level label for what's being built/tested."
        },
        "runner-type": {
          "required": true,
          "type": "string",
          "description": "Name of the GitHub-managed runner type to use for the build."
        },
        "build-generates-artifacts": {
          "required": true,
          "type": "boolean",
          "description": "If set, upload generated build artifacts."
        },
        "xcode-version": {
          "required": false,
          "type": "string",
          "default": "",
          "description": "What xcode version to build with."
        },
        "sync-tag": {
          "required": false,
          "type": "string",
          "default": "",
          "description": "If this is set, our linter will use this to make sure that every other\njob with the same `sync-tag` is identical.\n"
        },
        "python_version": {
          "required": false,
          "type": "string",
          "default": "3.8",
          "description": "The python version to be used. Will be 3.8 by default\n"
        },
        "environment-file": {
          "required": false,
          "type": "string",
          "description": "Set the conda environment file used to setup macOS build."
        },
        "test-matrix": {
          "required": false,
          "type": "string",
          "description": "An option JSON description of what test configs to run later on. This\nis moved here from the Linux test workflow so that we can apply filter\nlogic using test-config labels earlier and skip unnecessary builds\n"
        }
      },
      "outputs": {
        "test-matrix": {
          "value": "${{ inputs.test-matrix }}",
          "description": "An optional JSON description of what test configs to run later on."
        },
        "build-outcome": {
          "value": "${{ jobs.build.outputs.build-outcome }}",
          "description": "The outcome of the build step. This is used to influence test filtering logic later on."
        }
      },
      "secrets": {
        "MACOS_SCCACHE_S3_ACCESS_KEY_ID": {
          "required": true,
          "description": "Access key for S3 bucket for macOS sccache."
        },
        "MACOS_SCCACHE_S3_SECRET_ACCESS_KEY": {
          "required": true,
          "description": "Secret for S3 bucket for macOS sccache."
        }
      }
    }
  },
  "jobs": {
    "build": {
      "if": "github.repository_owner == 'pytorch'",
      "runs-on": "${{ inputs.runner-type }}",
      "env": {
        "AWS_ACCESS_KEY_ID": "${{ secrets.MACOS_SCCACHE_S3_ACCESS_KEY_ID }}",
        "AWS_SECRET_ACCESS_KEY": "${{ secrets.MACOS_SCCACHE_S3_SECRET_ACCESS_KEY }}",
        "BUILD_ENVIRONMENT": "${{ inputs.build-environment }}"
      },
      "outputs": {
        "build-outcome": "${{ steps.build.outcome }}"
      },
      "steps": [
        {
          "name": "Checkout PyTorch",
          "uses": "pytorch/pytorch/.github/actions/checkout-pytorch@master"
        },
        {
          "name": "Set xcode version",
          "env": {
            "XCODE_VERSION": "${{ inputs.xcode-version }}"
          },
          "run": "if [ -n \"${XCODE_VERSION}\" ]; then\n  echo \"DEVELOPER_DIR=/Applications/Xcode_${XCODE_VERSION}.app/Contents/Developer\" >> \"${GITHUB_ENV}\"\nfi\n"
        },
        {
          "name": "Setup miniconda",
          "if": "inputs.environment-file == ''",
          "uses": "pytorch/test-infra/.github/actions/setup-miniconda@main",
          "with": {
            "python-version": "${{ inputs.python_version }}",
            "environment-file": ".github/requirements/conda-env-${{ runner.os }}-${{ runner.arch }}"
          }
        },
        {
          "name": "Setup miniconda using the provided environment file",
          "if": "inputs.environment-file != ''",
          "uses": "pytorch/test-infra/.github/actions/setup-miniconda@main",
          "with": {
            "python-version": "${{ inputs.python_version }}",
            "environment-file": "${{ inputs.environment-file }}"
          }
        },
        {
          "name": "Install macOS homebrew dependencies",
          "run": "# Install dependencies\nbrew install libomp\nbrew link --force libomp\n"
        },
        {
          "name": "Install sccache (only for non-forked PRs, and pushes to trunk)",
          "if": "${{ github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository }}",
          "run": "sudo curl --retry 3 https://s3.amazonaws.com/ossci-macos/sccache_v2.15 --output /usr/local/bin/sccache\nsudo chmod +x /usr/local/bin/sccache\necho \"SCCACHE_BUCKET=ossci-compiler-cache-circleci-v2\" >> \"${GITHUB_ENV}\"\necho \"SCCACHE_S3_KEY_PREFIX=${GITHUB_WORKFLOW}\" >> \"${GITHUB_ENV}\"\n"
        },
        {
          "name": "Get workflow job id",
          "id": "get-job-id",
          "uses": "./.github/actions/get-workflow-job-id",
          "if": "always()",
          "with": {
            "github-token": "${{ secrets.GITHUB_TOKEN }}"
          }
        },
        {
          "name": "Select all requested test configurations (if the test matrix is available)",
          "id": "filter",
          "uses": "./.github/actions/filter-test-configs",
          "with": {
            "github-token": "${{ secrets.GITHUB_TOKEN }}",
            "test-matrix": "${{ inputs.test-matrix }}"
          }
        },
        {
          "name": "Build",
          "if": "steps.filter.outputs.is-test-matrix-empty == 'False' || inputs.test-matrix == ''",
          "id": "build",
          "env": {
            "OUR_GITHUB_JOB_ID": "${{ steps.get-job-id.outputs.job-id }}"
          },
          "run": "echo \"CMAKE_PREFIX_PATH=${CONDA_PREFIX:-\"$(dirname \"$(which conda)\")/../\"}\" >> \"${GITHUB_ENV}\"\n${CONDA_RUN} .jenkins/pytorch/macos-build.sh\n"
        },
        {
          "name": "Archive artifacts into zip",
          "if": "inputs.build-generates-artifacts && steps.build.outcome != 'skipped'",
          "run": "zip -1 -r artifacts.zip dist/ build/.ninja_log build/compile_commands.json .pytorch-test-times.json\n"
        },
        {
          "name": "Store PyTorch Build Artifacts on GHA",
          "uses": "actions/upload-artifact@v3",
          "if": "inputs.build-generates-artifacts && steps.build.outcome != 'skipped'",
          "with": {
            "name": "${{ env.BUILD_ENVIRONMENT }}",
            "retention-days": 14,
            "if-no-files-found": "error",
            "path": "artifacts.zip"
          }
        },
        {
          "name": "Upload sccache stats to GHA",
          "uses": "actions/upload-artifact@v3",
          "if": "${{ (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && steps.build.outcome != 'skipped' }}",
          "with": {
            "name": "sccache-stats-${{ inputs.build-environment }}-runattempt${{ github.run_attempt }}-${{ steps.get-job-id.outputs.job-id }}",
            "retention-days": 14,
            "if-no-files-found": "warn",
            "path": "sccache-stats-*.json"
          }
        }
      ]
    }
  }
}