{
  "name": "windows-binary-libtorch-debug",
  "on": {
    "push": {
      "branches": [
        "master"
      ],
      "tags": [
        "ciflow/trunk/*"
      ]
    },
    "workflow_dispatch": null
  },
  "env": {
    "ALPINE_IMAGE": "308535385114.dkr.ecr.us-east-1.amazonaws.com/tool/alpine",
    "ANACONDA_USER": "pytorch",
    "AWS_DEFAULT_REGION": "us-east-1",
    "BUILD_ENVIRONMENT": "windows-binary-libtorch-debug",
    "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}",
    "PR_NUMBER": "${{ github.event.pull_request.number }}",
    "SHA1": "${{ github.event.pull_request.head.sha || github.sha }}",
    "SKIP_ALL_TESTS": 1
  },
  "concurrency": {
    "group": "windows-binary-libtorch-debug-${{ github.event.pull_request.number || github.ref_name }}-${{ github.ref_type == 'branch' && github.sha }}-${{ github.event_name == 'workflow_dispatch' }}",
    "cancel-in-progress": true
  },
  "jobs": {
    "libtorch-cpu-shared-with-deps-debug-build": {
      "if": "${{ github.repository_owner == 'pytorch' }}",
      "runs-on": "windows.4xlarge",
      "timeout-minutes": 240,
      "env": {
        "PYTORCH_ROOT": "${{ github.workspace }}/pytorch",
        "BUILDER_ROOT": "${{ github.workspace }}/builder",
        "PACKAGE_TYPE": "libtorch",
        "DESIRED_CUDA": "cpu",
        "GPU_ARCH_TYPE": "cpu",
        "SKIP_ALL_TESTS": 1,
        "LIBTORCH_CONFIG": "debug",
        "LIBTORCH_VARIANT": "shared-with-deps",
        "DESIRED_PYTHON": "3.7"
      },
      "steps": [
        {
          "name": "Display EC2 information",
          "shell": "bash",
          "run": "set -euo pipefail\nfunction get_ec2_metadata() {\n  # Pulled from instance metadata endpoint for EC2\n  # see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html\n  category=$1\n  curl -fsSL \"http://169.254.169.254/latest/meta-data/${category}\"\n}\necho \"ami-id: $(get_ec2_metadata ami-id)\"\necho \"instance-id: $(get_ec2_metadata instance-id)\"\necho \"instance-type: $(get_ec2_metadata instance-type)\"\necho \"system info $(uname -a)\"\n"
        },
        {
          "name": "[FB EMPLOYEES] Enable SSH (Click me for login details)",
          "uses": "seemethere/add-github-ssh-key@v1",
          "with": {
            "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
          }
        },
        {
          "name": "Enable long paths on Windows",
          "shell": "powershell",
          "run": "Set-ItemProperty -Path \"HKLM:\\\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name \"LongPathsEnabled\" -Value 1\n"
        },
        {
          "name": "Disables Windows Defender scheduled and real-time scanning for files in pytorch directory.",
          "shell": "powershell",
          "run": "Add-MpPreference -ExclusionPath $(Get-Location).tostring() -ErrorAction Ignore\n"
        },
        {
          "name": "Populate binary env",
          "shell": "bash",
          "run": "echo \"BINARY_ENV_FILE=${RUNNER_TEMP}/env\" >> \"${GITHUB_ENV}\"\necho \"PYTORCH_FINAL_PACKAGE_DIR=${RUNNER_TEMP}/artifacts\" >> \"${GITHUB_ENV}\"\necho \"WIN_PACKAGE_WORK_DIR=${RUNNER_TEMP}\"\n"
        },
        {
          "name": "Checkout PyTorch",
          "uses": "zhouzhuojie/checkout@05b13c9a0d21f08f6d5e64a1d5042246d13619d9",
          "with": {
            "ref": "${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}",
            "submodules": "recursive",
            "path": "pytorch"
          }
        },
        {
          "name": "Clean PyTorch checkout",
          "run": "# Remove any artifacts from the previous checkouts\ngit clean -fxd\n",
          "working-directory": "pytorch"
        },
        {
          "name": "Checkout pytorch/builder",
          "uses": "zhouzhuojie/checkout@05b13c9a0d21f08f6d5e64a1d5042246d13619d9",
          "with": {
            "ref": "main",
            "submodules": "recursive",
            "repository": "pytorch/builder",
            "path": "builder"
          }
        },
        {
          "name": "Clean pytorch/builder checkout",
          "run": "# Remove any artifacts from the previous checkouts\ngit clean -fxd\n",
          "working-directory": "builder"
        },
        {
          "name": "Populate binary env",
          "shell": "bash",
          "run": "\"${PYTORCH_ROOT}/.circleci/scripts/binary_populate_env.sh\"\n"
        },
        {
          "name": "Build PyTorch binary",
          "shell": "bash",
          "run": "\"${PYTORCH_ROOT}/.circleci/scripts/binary_windows_build.sh\"\n"
        },
        {
          "uses": "actions/upload-artifact@v3",
          "if": "always()",
          "with": {
            "name": "libtorch-cpu-shared-with-deps-debug",
            "retention-days": 14,
            "if-no-files-found": "error",
            "path": "${{ env.PYTORCH_FINAL_PACKAGE_DIR }}"
          }
        },
        {
          "name": "Wait until all sessions have drained",
          "shell": "powershell",
          "working-directory": "pytorch",
          "if": "always()",
          "timeout-minutes": 120,
          "run": ".github\\scripts\\wait_for_ssh_to_drain.ps1\n"
        },
        {
          "name": "Kill active ssh sessions if still around (Useful if workflow was cancelled)",
          "shell": "powershell",
          "working-directory": "pytorch",
          "if": "always()",
          "run": ".github\\scripts\\kill_active_ssh_sessions.ps1\n"
        }
      ]
    },
    "libtorch-cpu-shared-with-deps-debug-test": {
      "if": "${{ github.repository_owner == 'pytorch' }}",
      "needs": "libtorch-cpu-shared-with-deps-debug-build",
      "runs-on": "windows.4xlarge",
      "timeout-minutes": 240,
      "env": {
        "PYTORCH_ROOT": "${{ github.workspace }}/pytorch",
        "BUILDER_ROOT": "${{ github.workspace }}/builder",
        "PACKAGE_TYPE": "libtorch",
        "DESIRED_CUDA": "cpu",
        "GPU_ARCH_TYPE": "cpu",
        "SKIP_ALL_TESTS": 1,
        "LIBTORCH_CONFIG": "debug",
        "LIBTORCH_VARIANT": "shared-with-deps",
        "DESIRED_PYTHON": "3.7"
      },
      "steps": [
        {
          "name": "Display EC2 information",
          "shell": "bash",
          "run": "set -euo pipefail\nfunction get_ec2_metadata() {\n  # Pulled from instance metadata endpoint for EC2\n  # see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html\n  category=$1\n  curl -fsSL \"http://169.254.169.254/latest/meta-data/${category}\"\n}\necho \"ami-id: $(get_ec2_metadata ami-id)\"\necho \"instance-id: $(get_ec2_metadata instance-id)\"\necho \"instance-type: $(get_ec2_metadata instance-type)\"\necho \"system info $(uname -a)\"\n"
        },
        {
          "name": "[FB EMPLOYEES] Enable SSH (Click me for login details)",
          "uses": "seemethere/add-github-ssh-key@v1",
          "with": {
            "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
          }
        },
        {
          "name": "Enable long paths on Windows",
          "shell": "powershell",
          "run": "Set-ItemProperty -Path \"HKLM:\\\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name \"LongPathsEnabled\" -Value 1\n"
        },
        {
          "name": "Disables Windows Defender scheduled and real-time scanning for files in pytorch directory.",
          "shell": "powershell",
          "run": "Add-MpPreference -ExclusionPath $(Get-Location).tostring() -ErrorAction Ignore\n"
        },
        {
          "name": "Populate binary env",
          "shell": "bash",
          "run": "echo \"BINARY_ENV_FILE=${RUNNER_TEMP}/env\" >> \"${GITHUB_ENV}\"\necho \"PYTORCH_FINAL_PACKAGE_DIR=${RUNNER_TEMP}/artifacts\" >> \"${GITHUB_ENV}\"\necho \"WIN_PACKAGE_WORK_DIR=${RUNNER_TEMP}\"\n"
        },
        {
          "uses": "actions/download-artifact@v3",
          "name": "Download Build Artifacts",
          "with": {
            "name": "libtorch-cpu-shared-with-deps-debug",
            "path": "${{ env.PYTORCH_FINAL_PACKAGE_DIR }}"
          }
        },
        {
          "name": "Checkout PyTorch",
          "uses": "zhouzhuojie/checkout@05b13c9a0d21f08f6d5e64a1d5042246d13619d9",
          "with": {
            "ref": "${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}",
            "submodules": "recursive",
            "path": "pytorch"
          }
        },
        {
          "name": "Clean PyTorch checkout",
          "run": "# Remove any artifacts from the previous checkouts\ngit clean -fxd\n",
          "working-directory": "pytorch"
        },
        {
          "name": "Checkout pytorch/builder",
          "uses": "zhouzhuojie/checkout@05b13c9a0d21f08f6d5e64a1d5042246d13619d9",
          "with": {
            "ref": "main",
            "submodules": "recursive",
            "repository": "pytorch/builder",
            "path": "builder"
          }
        },
        {
          "name": "Clean pytorch/builder checkout",
          "run": "# Remove any artifacts from the previous checkouts\ngit clean -fxd\n",
          "working-directory": "builder"
        },
        {
          "name": "Populate binary env",
          "shell": "bash",
          "run": "\"${PYTORCH_ROOT}/.circleci/scripts/binary_populate_env.sh\"\n"
        },
        {
          "name": "Test PyTorch binary",
          "shell": "bash",
          "run": "\"${PYTORCH_ROOT}/.circleci/scripts/binary_windows_test.sh\"\n"
        },
        {
          "name": "Wait until all sessions have drained",
          "shell": "powershell",
          "working-directory": "pytorch",
          "if": "always()",
          "timeout-minutes": 120,
          "run": ".github\\scripts\\wait_for_ssh_to_drain.ps1\n"
        },
        {
          "name": "Kill active ssh sessions if still around (Useful if workflow was cancelled)",
          "shell": "powershell",
          "working-directory": "pytorch",
          "if": "always()",
          "run": ".github\\scripts\\kill_active_ssh_sessions.ps1\n"
        }
      ]
    }
  }
}