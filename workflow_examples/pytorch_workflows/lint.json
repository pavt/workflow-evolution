{
  "name": "Lint",
  "on": {
    "pull_request": null,
    "push": {
      "branches": [
        "master",
        "main",
        "release/*",
        "landchecks/*"
      ]
    },
    "workflow_dispatch": null
  },
  "jobs": {
    "lintrunner": {
      "runs-on": "linux.20_04.16x",
      "steps": [
        {
          "name": "Checkout PyTorch",
          "uses": "pytorch/pytorch/.github/actions/checkout-pytorch@master",
          "with": {
            "submodules": false,
            "fetch-depth": 1
          }
        },
        {
          "name": "Setup Python",
          "uses": "actions/setup-python@v4",
          "with": {
            "python-version": "3.8",
            "architecture": "x64",
            "check-latest": false,
            "cache": "pip",
            "cache-dependency-path": "**/.github/requirements-gha-cache.txt\n"
          }
        },
        {
          "name": "Install requirements",
          "run": "pip install -r .github/requirements-gha-cache.txt --user\n"
        },
        {
          "name": "Initialize lint dependencies",
          "run": "lintrunner init"
        },
        {
          "name": "Do build steps necessary for linters",
          "run": "python3 -m tools.linter.clang_tidy.generate_build_files\npython3 -m tools.generate_torch_version --is_debug=false\npython3 -m tools.pyi.gen_pyi \\\n  --native-functions-path aten/src/ATen/native/native_functions.yaml \\\n  --tags-path aten/src/ATen/native/tags.yaml \\\n  --deprecated-functions-path \"tools/autograd/deprecated.yaml\"\n"
        },
        {
          "name": "Run lintrunner on all files",
          "run": "set +e\nif ! lintrunner --force-color --all-files --tee-json=lint.json; then\n    echo \"\"\n    echo -e \"\\e[1m\\e[36mYou can reproduce these results locally by using \\`lintrunner\\`.\\e[0m\"\n    echo -e \"\\e[1m\\e[36mSee https://github.com/pytorch/pytorch/wiki/lintrunner for setup instructions.\\e[0m\"\n    exit 1\nfi\n"
        },
        {
          "name": "Store annotations",
          "if": "always() && github.event_name == 'pull_request'",
          "continue-on-error": true,
          "run": "# Use jq to massage the JSON lint output into GitHub Actions workflow commands.\njq --raw-output \\\n  '\"::\\(if .severity == \"advice\" or .severity == \"disabled\" then \"warning\" else .severity end) file=\\(.path),line=\\(.line),col=\\(.char),title=\\(.code) \\(.name)::\" + (.description | gsub(\"\\\\n\"; \"%0A\"))' \\\n  lint.json\n"
        }
      ]
    },
    "quick-checks": {
      "name": "quick-checks",
      "runs-on": "linux.20_04.4x",
      "steps": [
        {
          "name": "Checkout PyTorch",
          "uses": "pytorch/pytorch/.github/actions/checkout-pytorch@master",
          "with": {
            "submodules": false,
            "fetch-depth": 1
          }
        },
        {
          "name": "Clean PyTorch checkout",
          "run": "# Remove any artifacts from the previous checkouts\ngit clean -fxd\n"
        },
        {
          "name": "Setup Python",
          "uses": "actions/setup-python@v4",
          "with": {
            "python-version": "3.x",
            "architecture": "x64",
            "check-latest": false,
            "cache": "pip",
            "cache-dependency-path": "**/requirements.txt\n"
          }
        },
        {
          "name": "Install requirements",
          "id": "requirements",
          "run": "pip install -r requirements.txt --user"
        },
        {
          "name": "Ensure no non-breaking spaces",
          "if": "always()",
          "run": "# NB: We use 'printf' below rather than '\\u000a' since bash pre-4.2\n# does not support the '\\u000a' syntax (which is relevant for local linters)\n(! git --no-pager grep -In \"$(printf '\\xC2\\xA0')\" -- . || (echo \"The above lines have non-breaking spaces (U+00A0); please convert them to spaces (U+0020)\"; false))\n"
        },
        {
          "name": "Ensure cross-OS compatible file names",
          "if": "always()",
          "run": "(! git ls-files | grep -E '([<>:\"|?*]|[ .]$)' || (echo \"The above file names are not valid across all operating systems. Please ensure they don't contain the characters '<>:\"\"|?*' and don't end with a white space or a '.' \"; false))\n"
        },
        {
          "name": "Ensure no versionless Python shebangs",
          "if": "always()",
          "run": "(! git --no-pager grep -In '#!.*python$' -- . || (echo \"The above lines have versionless Python shebangs; please specify either python2 or python3\"; false))\n"
        },
        {
          "name": "C++ docs check",
          "if": "${{ always() && steps.requirements.outcome == 'success' }}",
          "run": "sudo apt-get install -y doxygen\ncd docs/cpp/source && ./check-doxygen.sh\n"
        },
        {
          "name": "CUDA kernel launch check",
          "if": "${{ always() && steps.requirements.outcome == 'success' }}",
          "run": "set -eux\npython torch/testing/_internal/check_kernel_launches.py |& tee \"${GITHUB_WORKSPACE}\"/cuda_kernel_launch_checks.txt\n"
        }
      ]
    },
    "pr-sanity-checks": {
      "name": "pr-sanity-checks",
      "runs-on": "linux.20_04.4x",
      "if": "github.event_name == 'pull_request' && !contains(github.event.pull_request.labels.*.name, 'skip-pr-sanity-checks')",
      "steps": [
        {
          "name": "Checkout PyTorch",
          "uses": "pytorch/pytorch/.github/actions/checkout-pytorch@master",
          "with": {
            "submodules": false,
            "fetch-depth": -1
          }
        },
        {
          "name": "PR size check",
          "env": {
            "BASE": "${{ github.event.pull_request.base.sha }}",
            "HEAD": "${{ github.event.pull_request.head.sha }}"
          },
          "run": "bash .github/scripts/pr-sanity-check.sh\n"
        }
      ]
    },
    "workflow-checks": {
      "name": "workflow-checks",
      "runs-on": "linux.20_04.4x",
      "steps": [
        {
          "name": "Checkout PyTorch",
          "uses": "pytorch/pytorch/.github/actions/checkout-pytorch@master",
          "with": {
            "submodules": false,
            "fetch-depth": 1
          }
        },
        {
          "name": "Setup Python",
          "uses": "actions/setup-python@v4",
          "with": {
            "python-version": "3.x",
            "architecture": "x64",
            "check-latest": false,
            "cache": "pip",
            "cache-dependency-path": "**/requirements.txt\n**/.github/requirements-gha-cache.txt\n"
          }
        },
        {
          "name": "Install requirements",
          "id": "requirements",
          "run": "pip install -r requirements.txt --user\n"
        },
        {
          "name": "Install Jinja2",
          "run": "pip install Jinja2==3.0.1 --user\n"
        },
        {
          "name": "Regenerate workflows",
          "id": "generate_workflows",
          "run": ".github/scripts/generate_ci_workflows.py"
        },
        {
          "name": "Assert that regenerating the workflows didn't change them",
          "run": "if ! .github/scripts/report_git_status.sh .github/workflows; then\n  echo\n  echo 'As shown by the above diff, the committed .github/workflows'\n  echo 'are not up to date according to .github/templates.'\n  echo 'Please run this command, commit, and push again to your PR:'\n  echo\n  echo '    .github/scripts/generate_ci_workflows.py'\n  echo\n  echo 'If running that command does nothing, you may need to rebase'\n  echo 'onto a more recent commit from the PyTorch master branch.'\n  false\nfi\n"
        },
        {
          "name": "Check that jobs will be cancelled",
          "if": "${{ always() && steps.generate_workflows.outcome == 'success' }}",
          "run": ".github/scripts/ensure_actions_will_cancel.py\n"
        }
      ]
    },
    "toc": {
      "name": "toc",
      "runs-on": "linux.20_04.4x",
      "env": {
        "NPM_CONFIG_PREFIX": "~/.npm-global"
      },
      "steps": [
        {
          "name": "Checkout PyTorch",
          "uses": "pytorch/pytorch/.github/actions/checkout-pytorch@master",
          "with": {
            "submodules": false,
            "fetch-depth": 1
          }
        },
        {
          "name": "Setup Node",
          "uses": "actions/setup-node@v3"
        },
        {
          "name": "Install markdown-toc",
          "run": "npm install -g markdown-toc"
        },
        {
          "name": "Regenerate ToCs and check that they didn't change",
          "run": "set -eu\nexport PATH=~/.npm-global/bin:\"$PATH\"\nfor FILE in $(git grep -Il '<!-- toc -->' -- '**.md'); do\n  markdown-toc --bullets='-' -i \"$FILE\"\ndone\n\nif ! .github/scripts/report_git_status.sh .; then\n  echo\n  echo 'As shown by the above diff, the table of contents in one or'\n  echo 'more Markdown files is not up to date with the file contents.'\n  echo 'You can either apply that Git diff directly to correct the'\n  echo 'table of contents, or if you have npm installed, you can'\n  echo 'install the npm package markdown-toc and run the following'\n  # shellcheck disable=SC2016\n  echo 'command (replacing $FILE with the filename for which you want'\n  echo 'to regenerate the table of contents):'\n  echo\n  # shellcheck disable=SC2016\n  echo \"    markdown-toc --bullets='-' -i \\\"\\$FILE\\\"\"\n  false\nfi\n"
        }
      ]
    },
    "test-tools": {
      "name": "Test tools",
      "if": "${{ github.repository == 'pytorch/pytorch' }}",
      "runs-on": "linux.20_04.4x",
      "steps": [
        {
          "name": "Checkout PyTorch",
          "uses": "pytorch/pytorch/.github/actions/checkout-pytorch@master",
          "with": {
            "submodules": false
          }
        },
        {
          "name": "Setup Python",
          "uses": "actions/setup-python@v4",
          "with": {
            "python-version": "3.8",
            "architecture": "x64",
            "check-latest": false,
            "cache": "pip",
            "cache-dependency-path": "**/requirements.txt\n**/requirements-flake8.txt\n**/.circleci/docker/requirements-ci.txt\n**/.github/requirements-gha-cache.txt\n"
          }
        },
        {
          "name": "Install dependencies",
          "run": "set -eux\npip install -r requirements.txt\npip install boto3==1.19.12\npip install typing-extensions==3.10 --user\npip install -r requirements-flake8.txt --user\npip install rockset==0.8.10 --user\npip install -r requirements.txt --user\npip install mypy==0.960 --user\nmake setup_lint\n"
        },
        {
          "name": "Test tools",
          "run": "python3 -m unittest discover -vs tools/test -p 'test_*.py'\npython3 -m unittest discover -vs .github/scripts -p 'test_*.py'\n"
        }
      ]
    },
    "test_collect_env": {
      "if": "${{ github.repository == 'pytorch/pytorch' }}",
      "name": "Test collect_env",
      "runs-on": "linux.20_04.4x",
      "strategy": {
        "matrix": {
          "test_type": [
            "with_torch",
            "without_torch",
            "older_python_version"
          ]
        }
      },
      "steps": [
        {
          "name": "Checkout PyTorch",
          "uses": "pytorch/pytorch/.github/actions/checkout-pytorch@master",
          "with": {
            "submodules": false,
            "fetch-depth": 1
          }
        },
        {
          "name": "Setup Python 3.5",
          "if": "matrix.test_type == 'older_python_version'",
          "uses": "actions/setup-python@v4",
          "with": {
            "python-version": "3.5",
            "architecture": "x64",
            "check-latest": false,
            "cache": "pip",
            "cache-dependency-path": "**/requirements.txt\n"
          }
        },
        {
          "name": "Setup Python 3.8",
          "if": "matrix.test_type != 'older_python_version'",
          "uses": "actions/setup-python@v4",
          "with": {
            "python-version": "3.8",
            "architecture": "x64",
            "check-latest": false,
            "cache": "pip",
            "cache-dependency-path": "**/requirements.txt\n"
          }
        },
        {
          "name": "Install torch",
          "if": "matrix.test_type == 'with_torch'",
          "run": "pip install -r requirements.txt\n# Doesn't really matter what torch version, we just need ANY torch installed\npip install 'torch==1.*'\n"
        },
        {
          "name": "Run collect_env.py",
          "run": "# All we need to see is that it passes\npython3 torch/utils/collect_env.py\n"
        }
      ]
    }
  },
  "concurrency": {
    "group": "${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}-${{ github.event_name == 'workflow_dispatch' }}",
    "cancel-in-progress": true
  }
}