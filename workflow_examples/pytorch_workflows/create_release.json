{
  "name": "Create Release",
  "on": {
    "push": {
      "tags": [
        "v*"
      ],
      "branches": [
        "master",
        "main",
        "nightly"
      ]
    },
    "release": {
      "types": [
        "published"
      ]
    },
    "pull_request": {
      "paths": [
        ".github/workflows/create_release.yml"
      ]
    }
  },
  "jobs": {
    "release": {
      "if": "${{ github.repository == 'pytorch/pytorch' }}",
      "name": "Create Release",
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "uses": "zhouzhuojie/checkout@05b13c9a0d21f08f6d5e64a1d5042246d13619d9",
          "with": {
            "submodules": "recursive",
            "ref": "${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}"
          }
        },
        {
          "name": "Fake name for PRs",
          "if": "${{ github.event_name == 'pull_request' }}",
          "run": "echo \"PT_GITHUB_REF=refs/tags/pr-tag\" >> \"$GITHUB_ENV\""
        },
        {
          "name": "Real name for non-PRs",
          "if": "${{ github.event_name != 'pull_request' }}",
          "run": "echo \"PT_GITHUB_REF=$GITHUB_REF\" >> \"$GITHUB_ENV\""
        },
        {
          "name": "Set filenames",
          "run": "tag_or_branch=\"${PT_GITHUB_REF#refs/tags/}\"\ntag_or_branch=\"${tag_or_branch#refs/heads/}\"\necho \"PT_RELEASE_NAME=pytorch-$tag_or_branch\" >> \"$GITHUB_ENV\"\necho \"PT_RELEASE_FILE=pytorch-$tag_or_branch.tar.gz\" >> \"$GITHUB_ENV\"\n"
        },
        {
          "name": "Create source distribution",
          "run": "# Create new folder with specified name so extracting the archive yields that\nrm -rf \"/tmp/$PT_RELEASE_NAME\"\ncp -r \"$PWD\" \"/tmp/$PT_RELEASE_NAME\"\nmv \"/tmp/$PT_RELEASE_NAME\" .\n# Cleanup\nrm -rf \"$PT_RELEASE_NAME\"/{.circleci,.jenkins}\nfind \"$PT_RELEASE_NAME\" -name '.git*' -exec rm -rv {} \\; || true\n# Create archive\ntar -czf \"$PT_RELEASE_FILE\" \"$PT_RELEASE_NAME\"\necho \"Created source archive $PT_RELEASE_FILE with content: $(ls -a \"$PT_RELEASE_NAME\")\"\n"
        },
        {
          "name": "Upload source distribution",
          "if": "${{ github.event_name == 'release' }}",
          "uses": "softprops/action-gh-release@v1",
          "with": {
            "files": "${{env.PT_RELEASE_FILE}}"
          }
        }
      ]
    }
  },
  "concurrency": {
    "group": "${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}-${{ github.event_name == 'workflow_dispatch' }}",
    "cancel-in-progress": true
  }
}