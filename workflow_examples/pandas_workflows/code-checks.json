{
  "name": "Code Checks",
  "on": {
    "push": {
      "branches": [
        "main",
        "1.5.x"
      ]
    },
    "pull_request": {
      "branches": [
        "main",
        "1.5.x"
      ]
    }
  },
  "env": {
    "ENV_FILE": "environment.yml",
    "PANDAS_CI": 1
  },
  "permissions": {
    "contents": "read"
  },
  "jobs": {
    "pre_commit": {
      "name": "pre-commit",
      "runs-on": "ubuntu-latest",
      "concurrency": {
        "group": "${{ github.event_name == 'push' && github.run_number || github.ref }}-pre-commit",
        "cancel-in-progress": true
      },
      "steps": [
        {
          "name": "Checkout",
          "uses": "actions/checkout@v3"
        },
        {
          "name": "Install Python",
          "uses": "actions/setup-python@v3",
          "with": {
            "python-version": "3.9.7"
          }
        },
        {
          "name": "Run pre-commit",
          "uses": "pre-commit/action@v2.0.3"
        }
      ]
    },
    "typing_and_docstring_validation": {
      "name": "Docstring and typing validation",
      "runs-on": "ubuntu-latest",
      "defaults": {
        "run": {
          "shell": "bash -el {0}"
        }
      },
      "concurrency": {
        "group": "${{ github.event_name == 'push' && github.run_number || github.ref }}-code-checks",
        "cancel-in-progress": true
      },
      "steps": [
        {
          "name": "Checkout",
          "uses": "actions/checkout@v3",
          "with": {
            "fetch-depth": 0
          }
        },
        {
          "name": "Set up Conda",
          "uses": "./.github/actions/setup-conda"
        },
        {
          "name": "Build Pandas",
          "id": "build",
          "uses": "./.github/actions/build_pandas"
        },
        {
          "name": "Check for no warnings when building single-page docs",
          "run": "ci/code_checks.sh single-docs",
          "if": "${{ steps.build.outcome == 'success' && always() }}"
        },
        {
          "name": "Run checks on imported code",
          "run": "ci/code_checks.sh code",
          "if": "${{ steps.build.outcome == 'success' && always() }}"
        },
        {
          "name": "Run doctests",
          "run": "ci/code_checks.sh doctests",
          "if": "${{ steps.build.outcome == 'success' && always() }}"
        },
        {
          "name": "Run docstring validation",
          "run": "ci/code_checks.sh docstrings",
          "if": "${{ steps.build.outcome == 'success' && always() }}"
        },
        {
          "name": "Use existing environment for type checking",
          "run": "echo $PATH >> $GITHUB_PATH\necho \"PYTHONHOME=$PYTHONHOME\" >> $GITHUB_ENV\necho \"PYTHONPATH=$PYTHONPATH\" >> $GITHUB_ENV\n",
          "if": "${{ steps.build.outcome == 'success' && always() }}"
        },
        {
          "name": "Typing + pylint",
          "uses": "pre-commit/action@v2.0.3",
          "with": {
            "extra_args": "--hook-stage manual --all-files"
          },
          "if": "${{ steps.build.outcome == 'success' && always() }}"
        },
        {
          "name": "Run docstring validation script tests",
          "run": "pytest scripts",
          "if": "${{ steps.build.outcome == 'success' && always() }}"
        }
      ]
    },
    "asv-benchmarks": {
      "name": "ASV Benchmarks",
      "runs-on": "ubuntu-latest",
      "defaults": {
        "run": {
          "shell": "bash -el {0}"
        }
      },
      "concurrency": {
        "group": "${{ github.event_name == 'push' && github.run_number || github.ref }}-asv-benchmarks",
        "cancel-in-progress": true
      },
      "steps": [
        {
          "name": "Checkout",
          "uses": "actions/checkout@v3",
          "with": {
            "fetch-depth": 0
          }
        },
        {
          "name": "Set up Conda",
          "uses": "./.github/actions/setup-conda"
        },
        {
          "name": "Build Pandas",
          "id": "build",
          "uses": "./.github/actions/build_pandas"
        },
        {
          "name": "Run ASV benchmarks",
          "run": "cd asv_bench\nasv machine --yes\nasv run --quick --dry-run --strict --durations=30 --python=same\n"
        }
      ]
    },
    "build_docker_dev_environment": {
      "name": "Build Docker Dev Environment",
      "runs-on": "ubuntu-latest",
      "defaults": {
        "run": {
          "shell": "bash -el {0}"
        }
      },
      "concurrency": {
        "group": "${{ github.event_name == 'push' && github.run_number || github.ref }}-build_docker_dev_environment",
        "cancel-in-progress": true
      },
      "steps": [
        {
          "name": "Clean up dangling images",
          "run": "docker image prune -f"
        },
        {
          "name": "Checkout",
          "uses": "actions/checkout@v3",
          "with": {
            "fetch-depth": 0
          }
        },
        {
          "name": "Build image",
          "run": "docker build --pull --no-cache --tag pandas-dev-env ."
        },
        {
          "name": "Show environment",
          "run": "docker run -w /home/pandas pandas-dev-env mamba run -n pandas-dev python -c \"import pandas as pd; print(pd.show_versions())\""
        }
      ]
    },
    "requirements-dev-text-installable": {
      "name": "Test install requirements-dev.txt",
      "runs-on": "ubuntu-latest",
      "concurrency": {
        "group": "${{ github.event_name == 'push' && github.run_number || github.ref }}-requirements-dev-text-installable",
        "cancel-in-progress": true
      },
      "steps": [
        {
          "name": "Checkout",
          "uses": "actions/checkout@v3",
          "with": {
            "fetch-depth": 0
          }
        },
        {
          "name": "Setup Python",
          "id": "setup_python",
          "uses": "actions/setup-python@v3",
          "with": {
            "python-version": "3.8",
            "cache": "pip",
            "cache-dependency-path": "requirements-dev.txt"
          }
        },
        {
          "name": "Install requirements-dev.txt",
          "run": "pip install -r requirements-dev.txt"
        },
        {
          "name": "Check Pip Cache Hit",
          "run": "echo ${{ steps.setup_python.outputs.cache-hit }}"
        }
      ]
    }
  }
}