{
  "name": "Release",
  "on": {
    "workflow_dispatch": null,
    "push": {
      "branches": [
        "main",
        "latest",
        "release/v*"
      ]
    }
  },
  "permissions": {
    "contents": "write",
    "pull-requests": "write",
    "checks": "write"
  },
  "jobs": {
    "release": {
      "outputs": {
        "pr": "${{ steps.release.outputs.pr }}",
        "releases": "${{ steps.release.outputs.releases }}",
        "release-flags": "${{ steps.release.outputs.release-flags }}",
        "branch": "${{ steps.release.outputs.pr-branch }}",
        "pr-number": "${{ steps.release.outputs.pr-number }}",
        "comment-id": "${{ steps.pr-comment.outputs.result }}",
        "check-id": "${{ steps.check.outputs.check_id }}"
      },
      "name": "Release",
      "if": "github.repository_owner == 'npm'",
      "runs-on": "ubuntu-latest",
      "defaults": {
        "run": {
          "shell": "bash"
        }
      },
      "steps": [
        {
          "name": "Checkout",
          "uses": "actions/checkout@v3"
        },
        {
          "name": "Setup Git User",
          "run": "git config --global user.email \"npm-cli+bot@github.com\"\ngit config --global user.name \"npm CLI robot\"\n"
        },
        {
          "name": "Setup Node",
          "uses": "actions/setup-node@v3",
          "with": {
            "node-version": "18.x"
          }
        },
        {
          "name": "Install npm@latest",
          "run": "npm i --prefer-online --no-fund --no-audit -g npm@latest"
        },
        {
          "name": "npm Version",
          "run": "npm -v"
        },
        {
          "name": "Install Dependencies",
          "run": "npm i --ignore-scripts --no-audit --no-fund"
        },
        {
          "name": "Release Please",
          "id": "release",
          "env": {
            "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
          },
          "run": "npx --offline template-oss-release-please ${{ github.ref_name }} ${{ github.event_name }}\n"
        },
        {
          "name": "Post Pull Request Comment",
          "if": "steps.release.outputs.pr-number",
          "uses": "actions/github-script@v6",
          "id": "pr-comment",
          "env": {
            "PR_NUMBER": "${{ steps.release.outputs.pr-number }}",
            "REF_NAME": "${{ github.ref_name }}"
          },
          "with": {
            "script": "const { REF_NAME, PR_NUMBER } = process.env\nconst repo = { owner: context.repo.owner, repo: context.repo.repo }\nconst issue = { ...repo, issue_number: PR_NUMBER }\n\nconst { data: workflow } = await github.rest.actions.getWorkflowRun({ ...repo, run_id: context.runId })\n\nlet body = '## Release Manager\\n\\n'\n\nconst comments = await github.paginate(github.rest.issues.listComments, issue)\nlet commentId = comments?.find(c => c.user.login === 'github-actions[bot]' && c.body.startsWith(body))?.id\n\nbody += `Release workflow run: ${workflow.html_url}\\n\\n#### Force CI to Rerun for This Release\\n\\n`\nbody += `This PR will be updated and CI will run for every non-\\`chore:\\` commit that is pushed to \\`main\\`. `\nbody += `To force CI to rerun, run this command:\\n\\n`\nbody += `\\`\\`\\`\\ngh workflow run release.yml -r ${REF_NAME}\\n\\`\\`\\``\n\nif (commentId) {\n  await github.rest.issues.updateComment({ ...repo, comment_id: commentId, body })\n} else {\n  const { data: comment } = await github.rest.issues.createComment({ ...issue, body })\n  commentId = comment?.id\n}\n\nreturn commentId\n"
          }
        },
        {
          "name": "Get Workflow Job",
          "uses": "actions/github-script@v6",
          "if": "steps.release.outputs.pr-sha",
          "id": "check-output",
          "env": {
            "JOB_NAME": "Release",
            "MATRIX_NAME": ""
          },
          "with": {
            "script": "const { owner, repo } = context.repo\n\nconst { data } = await github.rest.actions.listJobsForWorkflowRun({\n  owner,\n  repo,\n  run_id: context.runId,\n  per_page: 100\n})\n\nconst jobName = process.env.JOB_NAME + process.env.MATRIX_NAME\nconst job = data.jobs.find(j => j.name.endsWith(jobName))\nconst jobUrl = job?.html_url\n\nconst shaUrl = `${context.serverUrl}/${owner}/${repo}/commit/${{ steps.release.outputs.pr-sha }}`\n\nlet summary = `This check is assosciated with ${shaUrl}\\n\\n`\n\nif (jobUrl) {\n  summary += `For run logs, click here: ${jobUrl}`\n} else {\n  summary += `Run logs could not be found for a job with name: \"${jobName}\"`\n}\n\nreturn { summary }\n"
          }
        },
        {
          "name": "Create Check",
          "uses": "LouisBrunner/checks-action@v1.3.1",
          "id": "check",
          "if": "steps.release.outputs.pr-sha",
          "with": {
            "token": "${{ secrets.GITHUB_TOKEN }}",
            "status": "in_progress",
            "name": "Release",
            "sha": "${{ steps.release.outputs.pr-sha }}",
            "output": "${{ steps.check-output.outputs.result }}"
          }
        }
      ]
    },
    "update": {
      "needs": "release",
      "outputs": {
        "sha": "${{ steps.commit.outputs.sha }}",
        "check-id": "${{ steps.check.outputs.check_id }}"
      },
      "name": "Update - Release",
      "if": "github.repository_owner == 'npm' && needs.release.outputs.pr",
      "runs-on": "ubuntu-latest",
      "defaults": {
        "run": {
          "shell": "bash"
        }
      },
      "steps": [
        {
          "name": "Checkout",
          "uses": "actions/checkout@v3",
          "with": {
            "fetch-depth": 0,
            "ref": "${{ needs.release.outputs.branch }}"
          }
        },
        {
          "name": "Setup Git User",
          "run": "git config --global user.email \"npm-cli+bot@github.com\"\ngit config --global user.name \"npm CLI robot\"\n"
        },
        {
          "name": "Setup Node",
          "uses": "actions/setup-node@v3",
          "with": {
            "node-version": "18.x"
          }
        },
        {
          "name": "Install npm@latest",
          "run": "npm i --prefer-online --no-fund --no-audit -g npm@latest"
        },
        {
          "name": "npm Version",
          "run": "npm -v"
        },
        {
          "name": "Install Dependencies",
          "run": "npm i --ignore-scripts --no-audit --no-fund"
        },
        {
          "name": "Run Post Pull Request Actions",
          "env": {
            "RELEASE_PR_NUMBER": "${{ needs.release.outputs.pr-number }}",
            "RELEASE_COMMENT_ID": "${{ needs.release.outputs.comment-id }}",
            "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
          },
          "run": "npm exec --offline -- template-oss-release-manager\nnpm run rp-pull-request --ignore-scripts --if-present\n"
        },
        {
          "name": "Commit",
          "id": "commit",
          "env": {
            "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
          },
          "run": "git commit --all --amend --no-edit || true\ngit push --force-with-lease\necho \"::set-output  name=sha::$(git rev-parse HEAD)\"\n"
        },
        {
          "name": "Get Workflow Job",
          "uses": "actions/github-script@v6",
          "if": "steps.commit.outputs.sha",
          "id": "check-output",
          "env": {
            "JOB_NAME": "Update - Release",
            "MATRIX_NAME": ""
          },
          "with": {
            "script": "const { owner, repo } = context.repo\n\nconst { data } = await github.rest.actions.listJobsForWorkflowRun({\n  owner,\n  repo,\n  run_id: context.runId,\n  per_page: 100\n})\n\nconst jobName = process.env.JOB_NAME + process.env.MATRIX_NAME\nconst job = data.jobs.find(j => j.name.endsWith(jobName))\nconst jobUrl = job?.html_url\n\nconst shaUrl = `${context.serverUrl}/${owner}/${repo}/commit/${{ steps.commit.outputs.sha }}`\n\nlet summary = `This check is assosciated with ${shaUrl}\\n\\n`\n\nif (jobUrl) {\n  summary += `For run logs, click here: ${jobUrl}`\n} else {\n  summary += `Run logs could not be found for a job with name: \"${jobName}\"`\n}\n\nreturn { summary }\n"
          }
        },
        {
          "name": "Create Check",
          "uses": "LouisBrunner/checks-action@v1.3.1",
          "id": "check",
          "if": "steps.commit.outputs.sha",
          "with": {
            "token": "${{ secrets.GITHUB_TOKEN }}",
            "status": "in_progress",
            "name": "Release",
            "sha": "${{ steps.commit.outputs.sha }}",
            "output": "${{ steps.check-output.outputs.result }}"
          }
        },
        {
          "name": "Conclude Check",
          "uses": "LouisBrunner/checks-action@v1.3.1",
          "if": "needs.release.outputs.check-id && always()",
          "with": {
            "token": "${{ secrets.GITHUB_TOKEN }}",
            "conclusion": "${{ job.status }}",
            "check_id": "${{ needs.release.outputs.check-id }}"
          }
        }
      ]
    },
    "ci": {
      "name": "CI - Release",
      "needs": [
        "release",
        "update"
      ],
      "if": "needs.release.outputs.pr",
      "uses": "./.github/workflows/ci-release.yml",
      "with": {
        "ref": "${{ needs.release.outputs.branch }}",
        "check-sha": "${{ needs.update.outputs.sha }}"
      }
    },
    "post-ci": {
      "needs": [
        "release",
        "update",
        "ci"
      ],
      "name": "Post CI - Release",
      "if": "github.repository_owner == 'npm' && needs.release.outputs.pr && always()",
      "runs-on": "ubuntu-latest",
      "defaults": {
        "run": {
          "shell": "bash"
        }
      },
      "steps": [
        {
          "name": "Get Needs Result",
          "id": "needs-result",
          "run": "result=\"\"\nif [[ \"${{ contains(needs.*.result, 'failure') }}\" == \"true\" ]]; then\n  result=\"failure\"\nelif [[ \"${{ contains(needs.*.result, 'cancelled') }}\" == \"true\" ]]; then\n  result=\"cancelled\"\nelse\n  result=\"success\"\nfi\necho \"::set-output name=result::$result\"\n"
        },
        {
          "name": "Conclude Check",
          "uses": "LouisBrunner/checks-action@v1.3.1",
          "if": "needs.update.outputs.check-id && always()",
          "with": {
            "token": "${{ secrets.GITHUB_TOKEN }}",
            "conclusion": "${{ steps.needs-result.outputs.result }}",
            "check_id": "${{ needs.update.outputs.check-id }}"
          }
        }
      ]
    },
    "post-release": {
      "needs": "release",
      "name": "Post Release - Release",
      "if": "github.repository_owner == 'npm' && needs.release.outputs.releases",
      "runs-on": "ubuntu-latest",
      "defaults": {
        "run": {
          "shell": "bash"
        }
      },
      "steps": [
        {
          "name": "Checkout",
          "uses": "actions/checkout@v3"
        },
        {
          "name": "Setup Git User",
          "run": "git config --global user.email \"npm-cli+bot@github.com\"\ngit config --global user.name \"npm CLI robot\"\n"
        },
        {
          "name": "Setup Node",
          "uses": "actions/setup-node@v3",
          "with": {
            "node-version": "18.x"
          }
        },
        {
          "name": "Install npm@latest",
          "run": "npm i --prefer-online --no-fund --no-audit -g npm@latest"
        },
        {
          "name": "npm Version",
          "run": "npm -v"
        },
        {
          "name": "Install Dependencies",
          "run": "npm i --ignore-scripts --no-audit --no-fund"
        },
        {
          "name": "Run Post Release Actions",
          "env": {
            "RELEASES": "${{ needs.release.outputs.releases }}"
          },
          "run": "npm run rp-release --ignore-scripts --if-present ${{ join(fromJSON(needs.release.outputs.release-flags), ' ') }}\n"
        }
      ]
    }
  }
}