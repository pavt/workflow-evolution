{
  "name": "CI - Release",
  "on": {
    "workflow_dispatch": {
      "inputs": {
        "ref": {
          "required": true,
          "type": "string",
          "default": "main"
        }
      }
    },
    "workflow_call": {
      "inputs": {
        "ref": {
          "required": true,
          "type": "string"
        },
        "check-sha": {
          "required": true,
          "type": "string"
        }
      }
    }
  },
  "jobs": {
    "lint-all": {
      "name": "Lint All",
      "if": "github.repository_owner == 'npm'",
      "runs-on": "ubuntu-latest",
      "defaults": {
        "run": {
          "shell": "bash"
        }
      },
      "steps": [
        {
          "name": "Get Workflow Job",
          "uses": "actions/github-script@v6",
          "if": "inputs.check-sha",
          "id": "check-output",
          "env": {
            "JOB_NAME": "Lint All",
            "MATRIX_NAME": ""
          },
          "with": {
            "script": "const { owner, repo } = context.repo\n\nconst { data } = await github.rest.actions.listJobsForWorkflowRun({\n  owner,\n  repo,\n  run_id: context.runId,\n  per_page: 100\n})\n\nconst jobName = process.env.JOB_NAME + process.env.MATRIX_NAME\nconst job = data.jobs.find(j => j.name.endsWith(jobName))\nconst jobUrl = job?.html_url\n\nconst shaUrl = `${context.serverUrl}/${owner}/${repo}/commit/${{ inputs.check-sha }}`\n\nlet summary = `This check is assosciated with ${shaUrl}\\n\\n`\n\nif (jobUrl) {\n  summary += `For run logs, click here: ${jobUrl}`\n} else {\n  summary += `Run logs could not be found for a job with name: \"${jobName}\"`\n}\n\nreturn { summary }\n"
          }
        },
        {
          "name": "Create Check",
          "uses": "LouisBrunner/checks-action@v1.3.1",
          "id": "check",
          "if": "inputs.check-sha",
          "with": {
            "token": "${{ secrets.GITHUB_TOKEN }}",
            "status": "in_progress",
            "name": "Lint All",
            "sha": "${{ inputs.check-sha }}",
            "output": "${{ steps.check-output.outputs.result }}"
          }
        },
        {
          "name": "Checkout",
          "uses": "actions/checkout@v3",
          "with": {
            "ref": "${{ inputs.ref }}"
          }
        },
        {
          "name": "Setup Git User",
          "run": "git config --global user.email \"npm-cli+bot@github.com\"\ngit config --global user.name \"npm CLI robot\"\n"
        },
        {
          "name": "Setup Node",
          "uses": "actions/setup-node@v3",
          "with": {
            "node-version": "18.x"
          }
        },
        {
          "name": "Install npm@latest",
          "run": "npm i --prefer-online --no-fund --no-audit -g npm@latest"
        },
        {
          "name": "npm Version",
          "run": "npm -v"
        },
        {
          "name": "Install Dependencies",
          "run": "npm i --ignore-scripts --no-audit --no-fund"
        },
        {
          "name": "Lint",
          "run": "npm run lint --ignore-scripts"
        },
        {
          "name": "Post Lint",
          "run": "npm run postlint --ignore-scripts"
        },
        {
          "name": "Conclude Check",
          "uses": "LouisBrunner/checks-action@v1.3.1",
          "if": "steps.check.outputs.check_id && always()",
          "with": {
            "token": "${{ secrets.GITHUB_TOKEN }}",
            "conclusion": "${{ job.status }}",
            "check_id": "${{ steps.check.outputs.check_id }}"
          }
        }
      ]
    },
    "test-all": {
      "name": "Test All - ${{ matrix.platform.name }} - ${{ matrix.node-version }}",
      "if": "github.repository_owner == 'npm'",
      "strategy": {
        "fail-fast": false,
        "matrix": {
          "platform": [
            {
              "name": "Linux",
              "os": "ubuntu-latest",
              "shell": "bash"
            },
            {
              "name": "macOS",
              "os": "macos-latest",
              "shell": "bash"
            },
            {
              "name": "Windows",
              "os": "windows-latest",
              "shell": "cmd"
            }
          ],
          "node-version": [
            "10.0.0",
            "10.x",
            "12.x",
            "14.x",
            "16.x",
            "18.x"
          ]
        }
      },
      "runs-on": "${{ matrix.platform.os }}",
      "defaults": {
        "run": {
          "shell": "${{ matrix.platform.shell }}"
        }
      },
      "steps": [
        {
          "name": "Get Workflow Job",
          "uses": "actions/github-script@v6",
          "if": "inputs.check-sha",
          "id": "check-output",
          "env": {
            "JOB_NAME": "Test All",
            "MATRIX_NAME": " - ${{ matrix.platform.name }} - ${{ matrix.node-version }}"
          },
          "with": {
            "script": "const { owner, repo } = context.repo\n\nconst { data } = await github.rest.actions.listJobsForWorkflowRun({\n  owner,\n  repo,\n  run_id: context.runId,\n  per_page: 100\n})\n\nconst jobName = process.env.JOB_NAME + process.env.MATRIX_NAME\nconst job = data.jobs.find(j => j.name.endsWith(jobName))\nconst jobUrl = job?.html_url\n\nconst shaUrl = `${context.serverUrl}/${owner}/${repo}/commit/${{ inputs.check-sha }}`\n\nlet summary = `This check is assosciated with ${shaUrl}\\n\\n`\n\nif (jobUrl) {\n  summary += `For run logs, click here: ${jobUrl}`\n} else {\n  summary += `Run logs could not be found for a job with name: \"${jobName}\"`\n}\n\nreturn { summary }\n"
          }
        },
        {
          "name": "Create Check",
          "uses": "LouisBrunner/checks-action@v1.3.1",
          "id": "check",
          "if": "inputs.check-sha",
          "with": {
            "token": "${{ secrets.GITHUB_TOKEN }}",
            "status": "in_progress",
            "name": "Test All - ${{ matrix.platform.name }} - ${{ matrix.node-version }}",
            "sha": "${{ inputs.check-sha }}",
            "output": "${{ steps.check-output.outputs.result }}"
          }
        },
        {
          "name": "Checkout",
          "uses": "actions/checkout@v3",
          "with": {
            "ref": "${{ inputs.ref }}"
          }
        },
        {
          "name": "Setup Git User",
          "run": "git config --global user.email \"npm-cli+bot@github.com\"\ngit config --global user.name \"npm CLI robot\"\n"
        },
        {
          "name": "Setup Node",
          "uses": "actions/setup-node@v3",
          "with": {
            "node-version": "${{ matrix.node-version }}"
          }
        },
        {
          "name": "Update Windows npm",
          "if": "matrix.platform.os == 'windows-latest' && (startsWith(matrix.node-version, '12.') || startsWith(matrix.node-version, '14.'))",
          "run": "curl -sO https://registry.npmjs.org/npm/-/npm-7.5.4.tgz\ntar xf npm-7.5.4.tgz\ncd package\nnode lib/npm.js install --no-fund --no-audit -g ..\\npm-7.5.4.tgz\ncd ..\nrmdir /s /q package\n"
        },
        {
          "name": "Install npm@7",
          "if": "startsWith(matrix.node-version, '10.')",
          "run": "npm i --prefer-online --no-fund --no-audit -g npm@7"
        },
        {
          "name": "Install npm@latest",
          "if": "${{ !startsWith(matrix.node-version, '10.') }}",
          "run": "npm i --prefer-online --no-fund --no-audit -g npm@latest"
        },
        {
          "name": "npm Version",
          "run": "npm -v"
        },
        {
          "name": "Install Dependencies",
          "run": "npm i --ignore-scripts --no-audit --no-fund"
        },
        {
          "name": "Add Problem Matcher",
          "run": "echo \"::add-matcher::.github/matchers/tap.json\""
        },
        {
          "name": "Test",
          "run": "npm test --ignore-scripts"
        },
        {
          "name": "Conclude Check",
          "uses": "LouisBrunner/checks-action@v1.3.1",
          "if": "steps.check.outputs.check_id && always()",
          "with": {
            "token": "${{ secrets.GITHUB_TOKEN }}",
            "conclusion": "${{ job.status }}",
            "check_id": "${{ steps.check.outputs.check_id }}"
          }
        }
      ]
    }
  }
}